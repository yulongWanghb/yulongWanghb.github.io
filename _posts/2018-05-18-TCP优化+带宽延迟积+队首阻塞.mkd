# 带宽延迟积

> - 1.设计原因：发送端发送的数据或者接收端接受的数据超过了未确认的最大数据量，必须停下来等待另一方的**ACK确认**才能继续，导致数据缺口（链路中存在在某段链路上没有数据传输）

> - 2.解决方法：让窗口足够大，保证任何一端在**ACK返回前持续的发送数据**，只有传输不中断，才能保证最大吞吐量，这个**最优窗口**取决于**往返时间**

> - 3.BDP（带宽延迟积）：数据链路的容量×端到端延迟的乘积，即任意时刻处在途中未确认状态的数据量


## 实际使用带宽计算
> 假设窗口为M KB，往返时间为N s。实际的传输数率为[（M×1024*8）/N ]/10^6 Mbit/s ，这个才是实际的链路上的传输速率（理论上的），不管链路实际上的带宽有多大，实际使用的就这么多


## 说明
> 任何网络拥堵和丢包都会导致拥塞窗口被改变（重置或者降低），这种会大大的降低传输速率，同时控制流量也会对吞吐量进行了限制

---

# 队首阻塞
> 1. 原因：TCP设计为按照顺序传输分组到接受端，如果有一个分组丢失，后续必须保存在TCP的缓冲区进行等待，应用程序只能等全部数据到达才能访问所有数据，数据被延迟交付，这种情况被称为为延迟或者抖动

> 2. 避免方法：如果对延迟或者抖动要求很高的话，最好选择UDP协议

> 3. 说明： 在有些情况下丢包是让TCP性能到达最佳的关键，让接收端和发送端自适应调整，同时有些程序允许一定量的丢包，不需要可靠性传输和交付

---
# TCP性能优化
>   从核心来看，影响网络速度以及吞吐量的要素有以下几点
>>  - 1.TCP新连接的时候三次握手，多了一个往返时间，这个地方由于必须实现面向连接，可优化空间较小，减少往返时间？
>>  - 2.TCP 新连接慢启动过程，为了测试网络连接性能以及流量控制启用这个功能
>>  - 3.拥塞窗口大小，影响拥塞控制、网络吞吐量，这是个比较大的因素，但是窗口过大在一些网络环境不好的情况下影响是很大的，但是在现在高速网络中传输速度还是收到往返时间的限制，TCP的瓶颈都是延迟，而非带宽

## 服务器端优化：
>  - 1.增大初始拥塞窗口，现在规范已经把这项设置为10个报文段    
>  - 2.窗口缩放，TCP报文段选项字段有一个缩放因子  
>  - 3.TCP快速打开:允许在SYN分组中就发送应用程序

## 客户端优化：
>  - 1.减少不必要的数据传输或者采用压缩减少数据量
>  - 2.**重用TCP连接**,这个应该是重点，每一个新建的TCP连接代价都比较大，重用TCP连接可以避免新建连接的满启动过程，利用已经增大的拥塞窗口一次性把数据传输出去
