---
layout:     post
title:      TCP/IP网络协议族浅析
subtitle:   框架梳理
date:       2018.5.25
author:     WYL
catalog: true
tags:
    - TCP/IP协议族
---

# 前言
>   个人觉得想学习好网络协议，需要先对整体的结构有一个比较清晰的认识，因此本篇文章先从介绍整体框架开始，逐步的扩散到单独的协议，这样比较利于知识的梳理

#  网络协议模型
> 现在一般讲网络协议模型划分为5层（或者7层），每一层都有其特定的功能并连接上下两层，每一层都有若干协议支持该层的功能，下图简单的总结了各层使用的基本协议:

![协议栈示意图](https://github.com/yulongWanghb/yulongwanghb.github.io/raw/master/img/%E5%8D%8F%E8%AE%AE%E5%88%86%E5%B1%82.jpg)

1.物理层主要是负责将**数据帧编码成电信号或者其他信号进行传输**。这层的协议主要是一些硬件的接口协议(本文不介绍)

2.数据链路层负责**在下层提供比特流服务的基础上，建立管理节点的数据链路**,基础的功能有*差错控制*、*数据封装成帧*、*差错检测*等。在这一层的运行协议较为重要的有以太网协议、ARP协议（这货应该算是链路层与网络层之间，暂时归类在这里），还有无线传输中重要的IEEE802.11及其衍生的各种无线通信协议、PPP(点对点协议)等

3.网络层负责**地址解析、路由选择**，将上层的数据组成IP数据包，解决不同的网间通信问题，这一层的一些有IP协议、ICMP协议、IGMP等

4.传输层负责**端到端的差错控制和流量控制**,将数据正确传送给网络层，这层里比较重要的是TCP/UDP协议

5.5层模型中应用层综合7层中会话层和表示层，负责**提供各种用户接口、提供应用程序和网络之间 的接口**，常用的协议有HTTP、FTP、SMTP、TLS（这货也是介于传输层之间和传输层之间，加密通讯）

# 数据传递过程
> 上面讲述了5层模型，在模型中各层之间的流动是数据，在每一层数据会被处理成不同的格式，直至最后成为传送到线路上的数据帧

![数据封装过程](https://github.com/yulongWanghb/yulongwanghb.github.io/raw/master/img/%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6.jpg)

1. 应用层的数据抽象成了APP首部+应用数据，在7层模式中表示层+会话层都会在上层提供的数据单元上加上自己层的首部，这个不用深究，这些数据被统一交给传输层
2. 传输层根据需要使用的协议加上TCP首部或者UDP首部，在数据层面看TCP和UDP的区别就在这首部之中
3. 网络层把上层传下来的数据打包，加上ＩＰ首部，丢给下层
4. 数据链路层根据需要以太网协议加上以太网首尾部，形成最终传输在网络上的数据帧。如果是无线传输的话就按照802.11协议加上对应的首尾部
5. 物理层将封装好的数据帧进行信号转换变成比特流，以光/电信号（以太网）、电信号－模拟信号－电信号（无线网络）的形式进行传输

---

# TCP/IP网络协议

> 个人以为网络协议分为以下几类：1.就是用来改变数据传输格式，通过预先制定的规则校验数据携带的标志从而控制数据 例如上图中给数据加上自己首部的协议 2.控制数据传输方向，例如一些路由协议  3.提供额外辅助功能（加密，验证，地址转换等）

## TCP协议
#### TCP 特点
  - 面向连接 ： 表现->3次握手建立客户端到服务端之间的链接+全双工通信
  - 可靠的数据传输 ： 表现->数据确认与重发机制
  - 提供流量控制和拥塞控制： 表现->接受窗口（rwnd）+ 拥塞控制的4个方法（慢启动+拥塞避免算法+快速重传+快速回复算法）

#### TCP报文中的标示
![报文格式](https://github.com/yulongWanghb/yulongwanghb.github.io/raw/master/img/TCP%E9%A6%96%E9%83%A8%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png)  
1. 源端口和目的端口用于寻找发端和收端应用进程，结合IP首部的源地址和目的IP确定一个TCP连接  
2. 序号、确认号：用于确认数据正确传输
3. 标志比特：控制位，用来标示特殊报文的作用  
4. 窗口：用于流量控制和拥塞控制
5. 校验和：用来校验TCP报文段
6. 紧急指针：用于紧急发送数据的控制位

#### 拥塞控制的4个方法
![拥塞避免的4个方法](https://github.com/yulongWanghb/yulongwanghb.github.io/raw/master/img/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg)  

拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载  
慢启动方法：可以理解为在不知道网络实际负载的情况下有小到大不断探测网络性能  
拥塞避免方式：是为了避免对网络资源的需求增长的过于迅速（慢启动的增长是指数形式的）  
快速重传和快速回复：是为了在网络负载出现状况的时候能够最快的回复到最适合当前网络性能的情况  
#### 应用场景
对效率要求较低但是要求很高的准确性 的场景，例如：文件传输（FTP），邮件（SMTP）等

#### 优化方向
1. 三次握手的优化，减少来回往返的时延
2. 慢启动的优化，初始拥塞窗口由1变成了10 ，这个初始值是否可以再调整
3. 窗口缩放，选项字段中的窗口影响因子调试
4. 特殊情况下握手阶段就允许传输数据

---
# UDP用户数据报协议
#### UDP特点
1. 不保证消息交付：没有标志位进行控制
2. 不保证交付顺序：没有序号字段
3. 不面向连接（客户端与服务器之间不进行连接）
4. 不需要拥塞控制
5. 传输效率高，实现一对多、多对多等模式

#### UDP报文格式
![UDP报文格式]()  

UDP和TCP一样采用端口号来确定应用进程，但UDP的首部里只有8个字节  
UDP长度字段：整个UDP数据报长度（最小为8字节）  
校验和：*和TCP一样覆盖首部和数据字段*,但是这个校验和是可选的，TCP的校验是必须的

#### 伪首部的概念
伪首部并非实际的字段，而是一个虚拟的数据结构，这个信息从数据报所在IP分组头中提取的，仅为了计算校验和，不往下提交或向上递交，伪报头办证了TCP、UDP数据单元能正确的到达目的地址，防止出现路由选择错误的数据段

#### 应用场景
适用于对数据要求准确性比较低但速度要快的情形，例如即时通信、在线视频等

# IP协议
#### IP协议特点
1. 不提供端到端的可靠数据传输服务，提供最好的传输服务
2. 没有流量控制、有序传输等机制（类似于UDP）
3. 不面向连接

#### IP协议功能
1. 寻址（路由选择、子网寻址等）
2. 分包（IP分片）

# ICMP协议
#### ICMP特点
1. 跟TCP、UDP一样封装在IP数据报文中
2. 报文不传输用户数据，在IP主机、路由器之间传递控制信息，报告数据包无法传输的错误  

#### 报文格式
![ICMP 报文格式]()  
类型和代码：标示错误类型
校验和：校验报文在传输中是否发生了错误
标示：用于标示本ICMP进程，仅用于回显请求和应答ICMP报文

# ARP协议
#### 特点
1. 用于在IP地址到对应的硬件地址之间提供映射作用（通过IP地址找到MAC地址）
2. ARP发送的ARP请求是广播
3. 只限制在局域网中使用

#### 工作流程
![ARP工作流程]()  

图中如果目的主机没有在本地网络上，如果设置了路由转发，该数据报文将会被转发出去，如果没有设置的话，该报文会被丢弃
